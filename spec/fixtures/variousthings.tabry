############################
# Getting started
############################
cmd control-vehicle

arg {
  opts const car
  opts const bike
}

arg {
  opts const go
  opts const stop
}

# Arguments and possible options (arg)
arg vehicle_type1
arg vehicle_type3 "The type of vehicle"
arg vehicle_type4 {
  desc "The type of vehicle"
}
arg { opts const a }
arg (bool1 bool2) {
  opts const T
  opts const F
}

############################
# Options
############################

arg {
  opts const hello
  opts const "hello \"world\""
  opts const (T F true false yes no)
  opts shell "mycmd list-things"
  opts file
  opts dir
}

############################
# Optional args and Varargs (opt arg, varargs, opt varargs)
############################

arg first-arg-mandatory
opt arg second-arg-optional
opt varargs rest-args-optional { opts const (foo bar waz) }

############################
# Argument titles
############################

arg thing_to_search_for { title "thing to search for" }
varargs files_to_load { title "file to load" }

# Flags (flag, flagarg, reqd flagarg)
flag dry-run,d
flag dry-run2,r "Don't act, only show what would be done"
flagarg f,format { opts const (json yml) }
flagarg env,e "The environment (this must be given)" {
  opts const (prod beta dev)
}
flag (interactive,i force,f)

############################
# Subcommands (sub) 1
############################
sub list "List the things"
sub new,n "Create a thing"
sub delete,d {
  desc "Delete a thing"
  arg thing "The thing to delete" { opts shell "mycmd list" }
}
sub (do-something do-something-else,dse)

############################
# Subcommands (sub) 2
############################
cmd foo
arg toplevel-arg

flag dryrun

sub mysub1 {
  sub mysub2 {
    flag someopt
    opt arg mysub2-arg
  }
}

############################
# Includes
############################
cmd mydeploy

# Default command acts on project-and-environment
include @project-and-environment

# status command acts and project-and-environment as well
sub status @project-and-environment @verbose

# list command takes no position args, but takes an optional "env" flag
sub list @verbose {
  flagarg env @environment
}

defopts @environment {
  opts const (prod beta dev)
}

defargs @verbose {
  flag verbose "Show more info"
}

defargs @project-and-environment {
  arg project "The project" { opts const (project1 project2) }
  arg environment "The environment" @environment
}
